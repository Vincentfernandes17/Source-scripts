--// Container

local EzESP = {}

--// Internal stuff

EzESP.__Internals = {}
EzESP.__Internals.RunService = game:GetService("RunService")
EzESP.__Internals.Camera = workspace.CurrentCamera
EzESP.__Internals.Screen = EzESP.__Internals.Camera.ViewportSize
EzESP.__Internals.Bottom = Vector2.new(EzESP.__Internals.Screen.X/2,EzESP.__Internals.Screen.Y)
EzESP.__Internals.GetPoint = function(vector)
    local Position,OnScreen = EzESP.__Internals.Camera:WorldToScreenPoint(vector)
    return {Vector2.new(Position.X,Position.Y),OnScreen,Position.Z}
end

--// Tracer functions

EzESP.Tracer = function(obj,color,thickness)
    assert(typeof(obj)=="Instance","EzESP.Tracer | Expected Instance as argument #1")
    assert(typeof(color)=="Color3","EzESP.Tracer | Expected Color3 as argument #2")
    assert(type(thickness)=="number","EzESP.Tracer | Expected Number as argument #3")
    local Tracer = Drawing.new("Line")
    Tracer.Transparency = 1
    Tracer.Visible = false
    Tracer.From = EzESP.__Internals.Bottom
    Tracer.Color = color
    Tracer.Thickness = thickness
    local Render = EzESP.__Internals.RunService.RenderStepped:Connect(function()
        local Point = EzESP.__Internals.GetPoint(obj.Position)
        Tracer.To = Point[1]
        Tracer.Visible = Point[2]
    end)
    obj.AncestryChanged:Connect(function()
        if not obj:IsDescendantOf(game) then
            Render:Disconnect()
            Tracer:Remove()
        end
    end)
    local TracerObject = setmetatable({},{__tostring=function()return"Tracer"end})
    function TracerObject:Remove()
        Render:Disconnect()
        Tracer:Remove()
    end
    return TracerObject
end

EzESP.Title = function(obj,maincolor,textcolor,transparency,tab)
    assert(typeof(obj)=="Instance","EzESP.Title | Expected Instance as argument #1")
    assert(typeof(maincolor)=="Color3","EzESP.Title | Expected Color3 as argument #2")
    assert(typeof(textcolor)=="Color3","EzESP.Title | Expected Color3 as argument #3")
    assert(typeof(transparency)=="number","EzESP.Title | Expected Number as argument #4")
    assert(typeof(tab)=="table","EzESP.Title | Expected Table as argument #5")
    local Title = Drawing.new("Square")
    Title.Filled = true
    Title.Color = maincolor
    Title.Thickness = 1
    local Count = 0 -- Hacky method since # wasn't working for some reason
    for k,v in pairs(tab) do
        Count = Count + 1
    end
    Title.Size = Vector2.new(200,Count * 20)
    local Offset = 0.2 * Count
    Title.Visible = true
    Title.Transparency = 1
    local Properties = {}
    local i = 0
    for k=1,Count do -- Sorts in order instead of randomly
        local v=tab[k]
        local Distance = i * 16
        local Text = Drawing.new("Text")
        Text.Color = textcolor
        Text.Center = true
        Text.Size = 15
        Text.Text = tostring(v.Object[v.Property])
        Properties[k] = {["Distance"] = Distance,["Object"]=Text,["ActualObject"]=v.Object,["OutOf"]=v.OutOf,["Property"]=v.Property}
        i = i + 1     
    end
    local Render = EzESP.__Internals.RunService.RenderStepped:Connect(function()
        local Point = EzESP.__Internals.GetPoint(obj.Position + Vector3.new(0,2+Offset,0))
        Title.Position = Point[1] - Vector2.new(Title.Size.X / 2,0)
        Title.Visible = Point[2]
        local Biggest = 0
        for k,v in pairs(Properties) do
            v.Object.Visible = Point[2]
            v.Object.Position = Point[1] + Vector2.new(0,v.Distance)
            if v.OutOf == nil then
                v.Object.Text = v.ActualObject[v.Property]
                if #v.ActualObject[v.Property] > Biggest then
                    Biggest = #v.ActualObject[v.Property]
                end
            else
                v.Object.Text = v.ActualObject[v.Property].. "/".. tostring(v.ActualObject[v.OutOf])
                if #v.Object.Text > Biggest then
                    Biggest = #v.Object.Text
                end
            end
        end
        if Biggest ~= 0 then
            Title.Size = Vector2.new(Biggest*8,Count * 20)
        end
    end)
    obj.AncestryChanged:Connect(function()
        if not obj:IsDescendantOf(game) then
            Render:Disconnect()
            Title:Remove()
            for k,v in pairs(Properties) do
                v:Remove()
            end
        end
    end)
    local TitleObject= setmetatable({},{__tostring=function()return"Title"end})
    function TitleObject:Remove()
        Render:Disconnect()
        Title:Remove()
        for k,v in pairs(Properties) do
            v:Remove()
        end
    end
    return TitleObject
end

--// Return

return EzESP
